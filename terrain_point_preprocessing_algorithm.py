# -*- coding: utf-8 -*-

"""
/***************************************************************************
 TerrainProcessing
                                 A QGIS plugin
 Algorithms to process elevation data in varies formats
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-06-09
        copyright            : (C) 2022 by Kartoza
        email                : divan@kartoza.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Kartoza'
__date__ = '2022-06-09'
__copyright__ = '(C) 2022 by Kartoza'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os

from qgis.PyQt.QtCore import QCoreApplication, QVariant
from qgis.core import (
    QgsProcessing,
    QgsFeatureSink,
    QgsProcessingAlgorithm,
    QgsProcessingParameterFeatureSource,
    QgsProcessingParameterFeatureSink,
    QgsProcessingParameterFolderDestination,
    QgsProcessingParameterCrs,
    QgsProcessingOutputFolder
)

from qgis.core import (
    QgsProject,
    QgsSettings,
    QgsVectorFileWriter,
    QgsVectorLayer,
    QgsField,
    QgsCoordinateTransform,
    QgsPointXY,
    QgsFeature,
    QgsCoordinateReferenceSystem,
    QgsGeometry
)

from .default import (
    CD_OUTPUT_CRS,
    CD_DESTINATION_FOLDER,
    CD_SOURCE_CRS,
    CD_SOURCE_FOLDER,
    ALLOWED_FORMATS,
    DELIMITER_CHAR,
    COLUMN_COUNT,
    X_INDEX,
    Y_INDEX,
    ELEV_INDEX,
    ELEV_MIN_THRESHOLD,
    ELEV_MAX_THRESHOLD
)
from .utilities import (
    search_files,
    create_vector_file,
    create_empty_layer,
    remove_unwanted_chars
)


class TerrainPointPreprocessingAlgorithm(QgsProcessingAlgorithm):
    """
    """

    def initAlgorithm(self, config):
        """
        """

        # NEEDS TO ACTUALLY BE AN INPUT FOLDER OPTION
        self.addParameter(
            QgsProcessingParameterFolderDestination(
                CD_SOURCE_FOLDER,
                self.tr('Source folder'),
                optional=False
            )
        )

        self.addParameter(
            QgsProcessingParameterCrs(
                CD_SOURCE_CRS,
                self.tr('Source Coordinate System'),
                optional=True
            )
        )

        self.addParameter(
            QgsProcessingParameterCrs(
                CD_OUTPUT_CRS,
                self.tr('Output Coordinate System'),
                optional=True
            )
        )

        self.addParameter(
            QgsProcessingParameterFolderDestination(
                CD_DESTINATION_FOLDER,
                self.tr('Destination folder'),
                optional=True
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        source_folder = self.parameterAsString(
            parameters,
            CD_SOURCE_FOLDER,
            context
        )
        source_crs = self.parameterAsCrs(
            parameters,
            CD_SOURCE_CRS,
            context
        )
        output_crs = self.parameterAsCrs(
            parameters,
            CD_OUTPUT_CRS,
            context
        )
        destination_folder = self.parameterAsString(
            parameters,
            CD_DESTINATION_FOLDER,
            context
        )

        list_files = search_files(source_folder + '/', ALLOWED_FORMATS)
        total = len(list_files)
        completed = 0
        for current_file in list_files:
            feedback.setProgressText("Current file being processed: {}".format(current_file))

            list_attributes = [
                QgsField("Longitude", QVariant.Double),
                QgsField("Latitude", QVariant.Double),
                QgsField("Elevation", QVariant.Double)
            ]
            new_layer = create_empty_layer("Point", list_attributes, source_crs)
            layer_provider = new_layer.dataProvider()

            with open(current_file) as read_file:
                lines = read_file.readlines()
                for line in lines:
                    # Stop the algorithm if cancel button has been clicked
                    if feedback.isCanceled():
                        break

                    new_line = remove_unwanted_chars(line)

                    split = new_line.split(DELIMITER_CHAR)
                    if len(split) >= COLUMN_COUNT:
                        x = split[X_INDEX]
                        y = split[Y_INDEX]
                        elev = split[ELEV_INDEX]

                        if elev < ELEV_MIN_THRESHOLD or elev > ELEV_MAX_THRESHOLD:
                            # Elevation value is not valid
                            # Feature will be skipped/ignored
                            continue
                        else:
                            new_layer.startEditing()
                            new_point = QgsPointXY(x, y)
                            new_feature = QgsFeature()
                            new_feature.setAttributes([x, y, elev])
                            new_feature.setGeometry(QgsGeometry.fromPointXY(new_point))
                            layer_provider.addFeatures([new_feature])
                            new_layer.commitChanges()
                    else:
                        # Line does not consist of the correct number of columns
                        # Feature will be skipped/ignored
                        continue

                    return

            output_file_name = os.path.basename(current_file)
            destination_file = destination_folder + '/' + output_file_name

            success, created_qgsvectorlayer, msg = create_vector_file(new_layer, destination_file, output_crs)

            completed = completed + 1
            feedback.setProgress(int((completed / total) * 100))

        # Return the results of the algorithm
        return {CD_DESTINATION_FOLDER: destination_folder}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Point Preprocessing'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Preprocessing'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return TerrainPointPreprocessingAlgorithm()
