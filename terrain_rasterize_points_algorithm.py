# -*- coding: utf-8 -*-

"""
/***************************************************************************
 TerrainProcessing
                                 A QGIS plugin
 Algorithms to process elevation data in varies formats
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-06-09
        copyright            : (C) 2022 by Kartoza
        email                : divan@kartoza.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Kartoza'
__date__ = '2022-06-09'
__copyright__ = '(C) 2022 by Kartoza'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import qgis
import os

from qgis.PyQt.QtCore import QCoreApplication, QVariant
from qgis.core import (
    QgsProcessing,
    QgsFeatureSink,
    QgsProcessingAlgorithm,
    QgsProcessingParameterFeatureSource,
    QgsProcessingParameterFeatureSink,
    QgsProcessingParameterFolderDestination,
    QgsProcessingParameterCrs,
    QgsProcessingOutputFolder,
    QgsProcessingParameterEnum,
    QgsApplication
)

from qgis.core import (
    QgsProject,
    QgsSettings,
    QgsVectorFileWriter,
    QgsVectorLayer,
    QgsField,
    QgsCoordinateTransform,
    QgsPointXY,
    QgsFeature,
    QgsCoordinateReferenceSystem,
    QgsGeometry
)

from qgis.analysis import QgsNativeAlgorithms
import processing
from processing.core.Processing import Processing
Processing.initialize()
QgsApplication.processingRegistry().addProvider(QgsNativeAlgorithms())

from .default import (
    CD_OUTPUT_CRS,
    CD_DESTINATION_FOLDER,
    CD_SOURCE_CRS,
    CD_SOURCE_FOLDER,
    ALLOWED_VECTOR_FORMATS,
    RASTERIZE_OPTIONS,
    NEARSET_NEIGHBOUR,
    RASTERIZE_TYPE
)
from .utilities import (
    search_files,
    create_vector_file,
    create_empty_layer
)


class TerrainRasterizePointsAlgorithm(QgsProcessingAlgorithm):
    """
    """

    def initAlgorithm(self, config):
        """
        """

        # NEEDS TO ACTUALLY BE AN INPUT FOLDER OPTION
        self.addParameter(
            QgsProcessingParameterFolderDestination(
                CD_SOURCE_FOLDER,
                self.tr('Source folder'),
                optional=False
            )
        )

        self.addParameter(
            QgsProcessingParameterEnum(
                RASTERIZE_TYPE,
                self.tr(RASTERIZE_TYPE),
                options=RASTERIZE_OPTIONS,
                defaultValue=NEARSET_NEIGHBOUR
            )
        )

        self.addParameter(
            QgsProcessingParameterFolderDestination(
                CD_DESTINATION_FOLDER,
                self.tr('Destination folder'),
                optional=True
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        source_folder = self.parameterAsString(
            parameters,
            CD_SOURCE_FOLDER,
            context
        )
        destination_folder = self.parameterAsString(
            parameters,
            CD_DESTINATION_FOLDER,
            context
        )

        list_files = search_files(source_folder + '/', ALLOWED_VECTOR_FORMATS)
        total = len(list_files)
        completed = 0
        for vector_file in list_files:
            feedback.setProgressText("Current file being processed: {}".format(vector_file))

            output_file = destination_folder + '/' + 'test.sdat'

            print("input: " + vector_file)
            print("output: " + output_file)

            tool = "saga:nearestneighbour"
            parameters = {
                'SHAPES': vector_file,
                'FIELD': 'Elevation',
                #'CV_METHOD': 0,  # Cross-validation disabled
                #'CV_SUMMARY': 'TEMPORARY_OUTPUT',
                #'CV_RESIDUALS': 'TEMPORARY_OUTPUT',
                #'CV_SAMPLES': 10,
                'TARGET_USER_XMIN TARGET_USER_XMAX TARGET_USER_YMIN TARGET_USER_YMAX': '-34775.000000000,-25475.000000000,2473600.000000000,2489450.000000000 [EPSG:2053]',
                'TARGET_USER_SIZE': 25,
                'TARGET_USER_FITS': 1,
                'TARGET_OUT_GRID': output_file
            }

            print("before run")

            processing.run(tool, parameters)

            print("after run")

            completed = completed + 1
            feedback.setProgress(int((completed / total) * 100))

            break

        # Return the results of the algorithm
        return {CD_DESTINATION_FOLDER: destination_folder}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Create raster tiles'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Preprocessing'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return TerrainRasterizePointsAlgorithm()
