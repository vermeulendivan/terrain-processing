# -*- coding: utf-8 -*-

"""
/***************************************************************************
 TerrainProcessing
                                 A QGIS plugin
 Algorithms to process elevation data in varies formats
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-06-09
        copyright            : (C) 2022 by Kartoza
        email                : divan@kartoza.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Kartoza'
__date__ = '2022-06-09'
__copyright__ = '(C) 2022 by Kartoza'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (
    QgsProcessing,
    QgsFeatureSink,
    QgsProcessingAlgorithm,
    QgsProcessingParameterFeatureSource,
    QgsProcessingParameterFeatureSink,
    QgsProcessingParameterFolderDestination,
    QgsProcessingParameterCrs,
    QgsProcessingOutputFolder
)

from default import (
    CD_OUTPUT_CRS,
    CD_DESTINATION_FOLDER,
    CD_SOURCE_CRS,
    CD_SOURCE_FOLDER
)

class TerrainProcessingAlgorithm(QgsProcessingAlgorithm):
    """
    """

    def initAlgorithm(self, config):
        """
        """

        # NEEDS TO ACTUALLY BE AN INPUT FOLDER OPTION
        self.addParameter(
            QgsProcessingParameterFolderDestination(
                CD_SOURCE_FOLDER,
                self.tr('Source folder'),
                optional=False
            )
        )

        self.addParameter(
            QgsProcessingParameterCrs(
                CD_SOURCE_CRS,
                self.tr('Source Coordinate System'),
                optional=False
            )
        )

        self.addParameter(
            QgsProcessingParameterCrs(
                CD_OUTPUT_CRS,
                self.tr('Output Coordinate System'),
                optional=False
            )
        )

        self.addParameter(
            QgsProcessingParameterFolderDestination(
                CD_DESTINATION_FOLDER,
                self.tr('Destination folder'),
                optional=False
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        dest_id = ''  # ONLY TEMP

        source_folder = self.parameterAsSource(
            parameters,
            CD_SOURCE_FOLDER,
            context
        )
        source_crs = self.parameterAsCrs(
            parameters,
            CD_SOURCE_CRS,
            context
        )
        output_crs = self.parameterAsCrs(
            parameters,
            CD_OUTPUT_CRS,
            context
        )
        destination_folder = self.parameterAsString(
            parameters,
            CD_DESTINATION_FOLDER,
            context
        )

        while True:
            # Stop the algorithm if cancel button has been clicked
            if feedback.isCanceled():
                break

        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.
        #return {self.OUTPUT: dest_id}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Convert data'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Preprocessing'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return TerrainProcessingAlgorithm()
